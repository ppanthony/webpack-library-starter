!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("webpack-library-starter",[],t):"object"==typeof exports?exports["webpack-library-starter"]=t():e["webpack-library-starter"]=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";var n;(new(((n=r(1))&&n.__esModule?n:{default:n}).default)).init()},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,o=(n=r(2))&&n.__esModule?n:{default:n};function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,r,n;return t=e,(r=[{key:"init",value:function(){(new o.default).onReady()}}])&&a(t.prototype,r),n&&a(t,n),e}();t.default=i,e.exports=t.default},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,o=(n=r(3))&&n.__esModule?n:{default:n};function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=r(4),u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,r,n;return t=e,(r=[{key:"buildUX",value:function(){var e={div:{backgroundColor:"yellow",color:"red",height:function(){return window.innerHeight/2+"px"}}},t=(0,o.default)(e);window.onresize=function(){return t.update()}}},{key:"onReady",value:function(){var e=this;i(function(){e.buildUX()})}}])&&a(t.prototype,r),n&&a(t,n),e}();t.default=u,e.exports=t.default},function(e,t,r){e.exports=function(){"use strict";function e(e,t){return{}.hasOwnProperty.call(e,t)}var t=Object.assign||function(t,r){var n,o,a,i=Object(t);for(n=1;n<arguments.length;n++)for(a in o=Object(arguments[n]))e(o,a)&&(i[a]=o[a]);return i};function r(e){return e.charAt(0).toUpperCase()+e.substr(1)}var n,o=(n=0,function(e){return n++,"_"+(e||"")+Math.floor(Math.random()*Math.pow(2,32)).toString(36)+n+"_"});function a(e){return"string"==typeof e}function i(t,r,n){t[r]=t[r]||{};for(var o=arguments,a=2;a<o.length;a++)for(var i in n=o[a])e(n,i)&&(t[r][i]=n[i]);return t[r]}function u(e,t,r,n,o){var a=e[t];a=e[t]=t in e?Array.isArray(a)?a:[a]:[],o&&a.indexOf(r)>-1||(n?a.unshift(r):a.push(r))}function f(e,t,r,n,o){for(var a,i,f=e,c=[];f;){if(t(f)){if(n)for(a=0;a<c.length;a++)u(f,n,c[a],!1,!0);c[0]&&o&&(c[0][o]=f),c.unshift(f)}f=f.parent}for(a=0;a<c.length;a++)i=c[a],c[a]=r?i[r]:i;return c}function c(e,t,r){if(e.indexOf(t)<0)return[e];for(var n,o=0,a=0,i="",u=0,f=[];n=e.charAt(o);o++)i?n==i&&"\\"!=e.charAt(o-1)&&(i=""):('"'!=n&&"'"!=n||(i=n),r||("("!=n&&"["!=n||a++,")"!=n&&"]"!=n||a--),a||n!=t||(f.push(e.substring(u,o)),u=o+1));return f.concat(e.substring(u))}var l="$id",s="$order",d="$test",p="group",v=Object.keys,h={}.toString,m=h.call([]),y=h.call({});function b(e){return h.call(e)==y||h.call(e)==m}function g(e){return"function"==typeof e}var w=/^@(media|document|supports|page|[\w-]*keyframes)/i,x=/^\s*@/i;function j(t,r,n,o){if(o&&(r.nodes=[],r.ref={},n&&(r.diff={})),(n=n||{}).obj=t,h.call(t)==m){var a=[];n.at=x.exec(n.key);for(var y=0;y<t.length;y++){var T=n[y],k=j(t[y],r,n[y]||{parent:n,src:t,parentNode:a,index:y});r.diff&&T!=k&&u(r.diff,k?"added":"removed",k||T),a.push(k)}return a}t[l]&&(r.ref[t[l]]=n);var O=n.prevVal=n.lastVal;if(d in t){var _=g(t[d])?t[d](!n.disabled,n,r):t[d];if(!_)return;n.test=_}var A=n.children=n.children||{};n.lastRaw=n.rawVal||{},n.lastVal={},n.rawVal={},n.prop={},n.diff={};var C=0|t[s],M=[],S=function(e,t,n){var o=t in A,a=i(A,t,n);a.selPart=a.selPart||c(t,",");var f=j(e,r,a);f&&(A[t]=f),O&&(o?!f&&u(r.diff,"removed",A[t]):f&&u(r.diff,"added",f)),f||delete n.parent.children[t]};for(var $ in"selText"in n||function(e,t){var r=t.config,n=f(e,function(e){return e.key}).pop();if(e.parentRule=f(e.parent,function(e){return e.type==p}).pop()||null,n){var o,a=n.key,i=a.match(w);i?(e.type=p,e.at=i.pop(),(o="media"==e.at)&&(e.selPart=c(a.replace(w,""),",")),e.groupText=o?"@"+e.at+R(f(e,function(e){return e.type==p},"selPart","selChild","selParent"),""," and"):a,e.selText=f(e,function(e){return e.selText&&!e.at},"selText").pop()||""):x.test(a)?(e.type="at",e.selText=a):e.selText=""+R(f(n,function(e){return e.selPart&&!e.at},"selPart","selChild","selParent"),""," ",!0),e.selText=P(r,"selector",e.selText,e,t),e.selText&&(e.selTextPart=c(e.selText,",")),e!==n&&(e.ruleNode=n)}}(n,r),t)if(e(t,$))if(!b(t[$])||h.call(t[$])==m&&!b(t[$][0])){if("@"==$[0]){S([].concat(t[$]).reduce(function(e,t){return e[t]=";",e},{}),$,{parent:n,src:t,key:$,inline:!0});continue}var N=function(e){e!=d&&E(n,t,e,r)};C?M.push([N,$]):N($)}else S(t[$],$,{parent:n,src:t,key:$});if(O){for($ in A)$ in t||(u(r.diff,"removed",A[$]),delete A[$]);var V=function(){var e=v(n.lastVal),t=v(O).filter(function(t){return e.indexOf(t)<0});t.length&&(n.diff.removed=t),v(n.diff).length&&u(r.diff,"changed",n)};C?M.push([V,null]):V()}return C&&u(r,"_order",{order:C,func:M}),r.nodes.push(n),n}function E(t,r,n,o,a){var i,f=t.prevVal,c=t.lastVal,l=(i=n,!isNaN(parseFloat(i))&&isFinite(i)?a:n),s=t.lastRaw[l],d=f&&f[l],p={node:t,result:o};s&&(p.raw=s[0]),[].concat(r[n]).forEach(function(r){p.cooked=d,p.raw=s=g(r)?r(p):r;var n=P(o.config,"value",s,l,t,o,a);if(b(n))for(var i in n)e(n,i)&&E(t,n,i,o,l);else u(t.rawVal,l,s,!0),function(e){return"string"==typeof e&&e||"number"==typeof e&&isFinite(e)}(n)&&(u(t.prop,l,n,!0),d=c[l]=n)}),f&&(l in f?f[l]!=c[l]&&u(t.diff,"changed",l):u(t.diff,"added",l))}function R(e,t,r,n){return e.length?e[0].reduce(function(o,a){var i,u=t?t+r:t;return n?(i=c(a,"&"),u=i.length>1?i.join(t):u+a):u+=a,o.concat(R(e.slice(1),u,r,n))},[]):t}function P(e,t){var r=[].slice.call(arguments,2),n=e.plugins;return[].concat(n).reduce(function(e,n){return n[t]?n[t].apply(null,[e].concat(r)):e},r.shift())}function T(t){return t=function(t,r){for(var n in t=t||{},r)!e(r,n)||n in t||(t[n]=r[n]);return t}(t,{plugins:[],intros:[]}),function(e,r){var n=function(e,r){return arguments.length>1&&(o.state=r||{}),e&&(o.obj=g(e)?e():e),o.root=j(i({},"",o.intro,o.obj),o,o.root,!0),null!=(n=o)._order&&(n._order.sort(function(e,t){return e.order-t.order}).forEach(function(e){e.func.forEach(function(e){e[0](e[1])})}),n._order=[]),o=P(t,"post",o),g(t.onUpdate)&&t.onUpdate(o),o;var n},o={intro:{},update:n,config:t};return[].concat(t.intros).forEach(function(e){i(o,"intro",g(e)?e(o):e)}),n(e,r||t.state),o}}var k=function(e,t,r,n){var o=/@import/i.test(n.selText),a=e.cssRules||e.rules,i=0,u=[],f=n.inline?r.map(function(e){return[n.selText," ",e]}):[[t,"{",r.join(""),"}"]];return f.forEach(function(r){if(e.cssRules)try{i=o?0:a.length,e.appendRule?e.appendRule(r.join("")):e.insertRule(r.join(""),i),u.push(a[i])}catch(e){}else e.addRule&&[].concat(t).forEach(function(t){try{o?(i=e.addImport(r[2]),u.push(e.imports[i])):/^\s*@/.test(t)||(e.addRule(t,r[2],a.length),u.push(a[a.length-1]))}catch(e){}})}),u};function O(e){var t=e.prop;return Object.keys(t).map(function(r){if("$"==r[0])return"";for(var n,o="",a=t[r].length;a--;)n=t[r][a],o+=e.inline?r:S(r,!0)+":"+n+";";return o})}var _=["Webkit","Moz","ms","O"],A=new RegExp("^(?:"+_.join("|")+")[A-Z]"),C=document.createElement("div").style,M={float:function(e){for(var t=e.length;t--;)if(e[t]in C)return e[t]}(["styleFloat","cssFloat","float"])};function S(e,t){if("$"==e[0])return"";var n=M[e]||(M[e]=function(e){if(!(e in C||"-"==e[0]))for(var t,n=r(e),o=_.length;o--;)if((t=_[o]+n)in C)return t}(e)||e);return t?(A.test(n)?r(n):"float"==e&&e||n).replace(/[A-Z]/g,function(e){return"-"+e.toLowerCase()}):n}function $(e){(e=e||{}).vendors&&(_=e.vendors);var r=e.id||"cssobj"+o(),n=e.frame,i=n?n.contentDocument||n.contentWindow.document:document,u=function(e,t,r){var n=e.getElementById(t),o=e.getElementsByTagName("head")[0];if(n){if(r.append)return n;n.parentNode&&n.parentNode.removeChild(n)}if(n=e.createElement("style"),o.appendChild(n),n.setAttribute("id",t),r.attrs)for(var a in r.attrs)n.setAttribute(a,r.attrs[a]);return n}(i,r,e),f=u.sheet||u.styleSheet,c=/page/i,l=function(e){return!!e&&(c.test(e.at)||e.parentRule&&c.test(e.parentRule.at))},s=function(e){return!e.parentRule||null!==e.parentRule.omGroup},d=function(e,t,r){return e.deleteRule?e.deleteRule(t.keyText||r):e.removeRule(r)},p=function(e){if(e){var t=e.parentRule||f,r=t.cssRules||t.rules;[].some.call(r,function(r,n){if(r===e)return d(t,e,n),!0})}};function v(e){var t=m.indexOf(e);t>-1&&(e.mediaEnabled=!1,b(e),m.splice(t,1)),[e.omGroup].concat(e.omRule).forEach(p)}var h=function(e,t,r){if(r){var n=function(e){var t="omGroup"in e?e:e.parentRule;return t&&t.omGroup||f}(e),o=e.parentRule;if(s(e))return e.omRule=k(n,t,r,e);if(o){if(o.mediaEnabled)return[].concat(e.omRule).forEach(p),e.omRule=k(n,t,r,e);e.omRule&&(e.omRule.forEach(p),delete e.omRule)}}},m=[],y=function(){m.forEach(function(e){e.mediaEnabled=e.mediaTest(i),b(e)})};window.attachEvent?window.attachEvent("onresize",y):window.addEventListener&&window.addEventListener("resize",y,!0);var b=function(t,r){if(t){if(t.constructor===Array)return t.map(function(e){b(e,r)});if((!t.key||"$"!=t.key[0])&&t.prop){if("media"==t.at&&t.selParent&&t.selParent.postArr)return t.selParent.postArr.push(t);t.postArr=[];var n=t.children,o="group"==t.type;if(l(t)&&(r=r||[]),o&&!l(t)){var a=t.obj.$groupTest,u="media"==t.at&&e.media;if(a||u){t.omGroup=null;var c=a||u&&function(r){var n=e.media;return!n||t.selPart.some(function(e){return new RegExp(n,"i").test(e.trim())})}||function(){return!0};try{var d=c(i);t.mediaTest=c,t.mediaEnabled=d,m.push(t)}catch(e){}}else[""].concat(_).some(function(e){return t.omGroup=k(f,"@"+(e?"-"+e.toLowerCase()+"-":e)+t.groupText.slice(1),[],t).pop()||null})}var p=t.selTextPart,v=O(t);for(var y in v.join("")&&(l(t)||h(t,p,v),r&&r.push(p?p+" {"+v.join("")+"}":v)),n)""===y?t.postArr.push(n[y]):b(n[y],r);o&&l(t)&&s(t)&&(h(t,t.groupText,r),r=null);var g=t.postArr;delete t.postArr,g.map(function(e){b(e,r)})}}},g=e.media;return{post:function(r){var n=g!=e.media;if(g=e.media,y(),r.set=function(e,n){var o=Array.isArray(e)?e:[e],i=r.obj;a(o[0])&&"$"===o[0][0]&&(i=r.ref[o.shift().slice(1)].obj);var u=function(e,t){var r,n,o,a=Array.isArray(t)?t:String(t).split("."),i=1,u={ok:i,path:a,obj:e};for(r=0;r<a.length;r++){if(n=a[r],!e.hasOwnProperty(n)||null==(o=e[n])||"function"!=typeof o&&"object"!=typeof o){i=0;break}e=e[n]}return u.ok=i,u.path=a.slice(0,r),u.obj=e,u}(i,o);u.ok&&t(u.obj,n),r.update()},r.cssdom=u,!r.diff||n)n&&(m=[],function(e){for(var t=e.cssRules||e.rules,r=t.length;r--;)d(e,t[r],r)}(f)),b(r.root);else{var o=r.diff;o.added&&o.added.forEach(function(e){b(e)}),o.removed&&o.removed.forEach(function(e){e.selChild&&e.selChild.forEach(v),v(e)}),o.changed&&o.changed.forEach(function(e){var t=e.omRule,r=e.diff;t||(t=h(e,e.selTextPart,O(e))),[].concat(r.added,r.changed).forEach(function(r){r&&t&&t.forEach(function(t){try{n=t.style,o=r,a=e.prop[r][0],u=/^(.*)!(important)\s*$/i.exec(a),f=S(o),c=S(o,!0),u?(i=u[1],u=u[2],n.setProperty?n.setProperty(c,i,u):(n[c.toUpperCase()]=a,n.cssText=n.cssText)):n[f]=a}catch(e){}var n,o,a,i,u,f,c})}),r.removed&&r.removed.forEach(function(e){var r=S(e,!0);r&&t&&t.forEach(function(e){try{e.style.removeProperty?e.style.removeProperty(r):e.style.removeAttribute(r)}catch(e){}})})})}return r}}}var N=/[ \~\\@$%^&\*\(\)\+\=,\/';\:"?><[\]\\{}|`]/;function V(e,t,r){var n,i,u,f,l,s,d,p=(t=t||{}).local;return t.local=p?p&&"object"==typeof p?p:{}:{space:""},t.plugins=[].concat(t.plugins||[],(n=t.local,i=(n=n||{}).space="string"!=typeof n.space?"function"==typeof n.random?n.random():o():n.space,u=n.localNames=n.localNames||{},f=function(e){return"!"==e[0]?e.substr(1):e in u?u[e]:e+i},l=function(e){if(!a(e))return e;for(var t,r,n=c(e,".",!0),o=n[0],i=1,u=n.length;i<u;i++)(t=n[i])?(r=t.search(N),o+="."+(r<0?f(t):f(t.substr(0,r))+t.substr(r))):o+=".";return o},s=function(e){return a(e)?l(e.replace(/\s+\.?/g,".").replace(/^([^:\s.])/i,".$1")).replace(/\./g," ").trim():e},{selector:function(e,t,r){return t.at?e:(r.mapSel||d(r),l(e))},post:d=function(e){return e.space=i,e.localNames=u,e.mapSel=l,e.mapClass=s,e}}),$(t.cssom)),T(t)(e,r)}return V.version="1.3.6",V}()},function(e,t,r){"use strict";e.exports=function(e){if("undefined"==typeof document)throw new Error("document-ready only runs in the browser");var t=document.readyState;if("complete"===t||"interactive"===t)return setTimeout(e,0);document.addEventListener("DOMContentLoaded",function(){e()})}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,